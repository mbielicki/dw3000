--- shared_functions.c -- 568 ------------------------------
void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts)
{
uint8_t i;
*ts = 0;
for (i = 0; i < FINAL_MSG_TS_LEN; i++)
    E014        b 0x00020BE8
--- shared_functions.c -- 573 ------------------------------
{
*ts += ((uint32_t)ts_field[i] << (i * 8));
    9B00        ldr r3, [sp]
    681A        ldr r2, [r3]
    F89D300F    ldrb.w r3, [sp, #15]
    9901        ldr r1, [sp, #4]
    440B        add r3, r1
    781B        ldrb r3, [r3]
    4619        mov r1, r3
    F89D300F    ldrb.w r3, [sp, #15]
    00DB        lsls r3, r3, #3
    FA01F303    lsl.w r3, r1, r3
    441A        add r2, r3
    9B00        ldr r3, [sp]
    601A        str r2, [r3]
--- shared_functions.c -- 572 ------------------------------
for (i = 0; i < FINAL_MSG_TS_LEN; i++)
    F89D300F    ldrb.w r3, [sp, #15]
    3301        adds r3, #1
    F88D300F    strb.w r3, [sp, #15]
    F89D300F    ldrb.w r3, [sp, #15]
    2B03        cmp r3, #3
    D9E6        bls 0x00020BBE
--- shared_functions.c -- 573 ------------------------------
{
*ts += ((uint32_t)ts_field[i] << (i * 8));
}
}
    BF00        nop
    BF00        nop
    B004        add sp, sp, #16
    4770        bx lr
--- shared_functions.c -- 650 ------------------------------
*
* return None
*/
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
    B500        push {lr}
    B087        sub sp, sp, #28
    9003        str r0, [sp, #12]
    9102        str r1, [sp, #8]
    9201        str r2, [sp, #4]
    9300        str r3, [sp]
--- shared_functions.c -- 655 ------------------------------
uint32_t lo_result_tmp = 0;
    2300        movs r3, #0
    9305        str r3, [sp, #20]
--- shared_functions.c -- 656 ------------------------------
uint32_t hi_result_tmp = 0;
    2300        movs r3, #0
    9304        str r3, [sp, #16]
--- shared_functions.c -- 657 ------------------------------
// If a mask has been passed into the function for the system status register (lower 32-bits)
if (lo_mask)
    9B01        ldr r3, [sp, #4]
    2B00        cmp r3, #0
    D014        beq 0x00020C3C
--- shared_functions.c -- 660 ------------------------------
{
while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
    E00A        b 0x00020C2A
--- shared_functions.c -- 662 ------------------------------
{
// If a mask value is set for the system status register (higher 32-bits)
if (hi_mask)
    9B00        ldr r3, [sp]
    2B00        cmp r3, #0
    D007        beq 0x00020C2A
--- shared_functions.c -- 665 ------------------------------
{
// If mask value for the system status register (higher 32-bits) is found
if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
    F7F1FE09    bl 0x00012830 <dwt_readsysstatushi>
    9004        str r0, [sp, #16]
    9A04        ldr r2, [sp, #16]
    9B00        ldr r3, [sp]
    4013        ands r3, r2
    2B00        cmp r3, #0
    D115        bne 0x00020C56
--- shared_functions.c -- 661 ------------------------------
while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
    F7F1FDEF    bl 0x0001280C <dwt_readsysstatuslo>
    9005        str r0, [sp, #20]
    9A05        ldr r2, [sp, #20]
    9B01        ldr r3, [sp, #4]
    4013        ands r3, r2
    2B00        cmp r3, #0
    D0EC        beq 0x00020C14
    E00D        b 0x00020C58
--- shared_functions.c -- 671 ------------------------------
}
}
}
// if only a mask value for the system status register (higher 32-bits) is set
else if (hi_mask)
    9B00        ldr r3, [sp]
    2B00        cmp r3, #0
    D00A        beq 0x00020C58
--- shared_functions.c -- 676 ------------------------------
{
while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
    BF00        nop
    F7F1FDF4    bl 0x00012830 <dwt_readsysstatushi>
    9004        str r0, [sp, #16]
    9A04        ldr r2, [sp, #16]
    9B00        ldr r3, [sp]
    4013        ands r3, r2
    2B00        cmp r3, #0
    D0F7        beq 0x00020C44
    E000        b 0x00020C58
--- shared_functions.c -- 669 ------------------------------
break;
    BF00        nop
--- shared_functions.c -- 676 ------------------------------
{
while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
}
if (lo_result != NULL)
    9B03        ldr r3, [sp, #12]
    2B00        cmp r3, #0
    D002        beq 0x00020C64
--- shared_functions.c -- 681 ------------------------------
{
*lo_result = lo_result_tmp;
    9B03        ldr r3, [sp, #12]
    9A05        ldr r2, [sp, #20]
    601A        str r2, [r3]
--- shared_functions.c -- 683 ------------------------------
}
if (hi_result != NULL)
    9B02        ldr r3, [sp, #8]
    2B00        cmp r3, #0
    D002        beq 0x00020C70
--- shared_functions.c -- 686 ------------------------------
{
*hi_result = hi_result_tmp;
    9B02        ldr r3, [sp, #8]
    9A04        ldr r2, [sp, #16]
    601A        str r2, [r3]
--- shared_functions.c -- 688 ------------------------------
}
}
    BF00        nop
    B007        add sp, sp, #28
    F85DFB04    pop.w {pc}
--- ds_twr_responder.c -- 113 ------------------------------
static void tx_conf_cb(const dwt_cb_data_t *cb_data);
uint16_t frame_len;
void handle_poll() {
    B530        push {r4-r5, lr}
    B09B        sub sp, sp, #0x6C
--- ds_twr_responder.c -- 118 ------------------------------
uint32_t resp_tx_time;
int ret;
/* Retrieve poll reception timestamp. */
poll_rx_ts = get_rx_timestamp_u64();
    F7FFFF57    bl 0x00020B2E <get_rx_timestamp_u64>
    4602        mov r2, r0
    460B        mov r3, r1
    49B4        ldr r1, =0x20000718 <poll_rx_ts>
    E9C12300    strd r2, r3, [r1, #0]
--- ds_twr_responder.c -- 123 ------------------------------
test_run_info((unsigned char *)"got poll");
    48B4        ldr r0, =0x00026BA8
    F7FFFE2E    bl 0x000208EC <test_run_info>
--- ds_twr_responder.c -- 125 ------------------------------
/* Set send time for response. See NOTE 9 below. */
resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
    4BB1        ldr r3, =0x20000718 <poll_rx_ts>
    E9D32300    ldrd r2, r3, [r3, #0]
    A1AA        adr r1, 0x00020F40
    E9D10100    ldrd r0, r1, [r1, #0]
    1814        adds r4, r2, r0
    EB430501    adc.w r5, r3, r1
    F04F0200    mov.w r2, #0
    F04F0300    mov.w r3, #0
    0A22        lsrs r2, r4, #8
    EA426205    orr.w r2, r2, r5, lsl #24
    0A2B        lsrs r3, r5, #8
    4613        mov r3, r2
    9319        str r3, [sp, #0x64]
--- ds_twr_responder.c -- 128 ------------------------------
dwt_setdelayedtrxtime(resp_tx_time);
    9819        ldr r0, [sp, #0x64]
    F7F1FCBA    bl 0x00012630 <dwt_setdelayedtrxtime>
--- ds_twr_responder.c -- 129 ------------------------------
/* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
    F44F7096    mov.w r0, #0x012C
    F7F1FD72    bl 0x000127A8 <dwt_setrxaftertxdelay>
--- ds_twr_responder.c -- 132 ------------------------------
dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
    20DC        movs r0, #0xDC
    F7F1FCF9    bl 0x000126BC <dwt_setrxtimeout>
--- ds_twr_responder.c -- 133 ------------------------------
/* Set preamble timeout for expected frames. See NOTE 6 below. */
dwt_setpreambledetecttimeout(PRE_TIMEOUT);
    2005        movs r0, #5
    F7F1FD08    bl 0x000126E0 <dwt_setpreambledetecttimeout>
--- ds_twr_responder.c -- 135 ------------------------------
/* Write and send the response message. See NOTE 10 below.*/
tag_address = get_src_addr(rx_buffer);
    48A3        ldr r0, =0x200006FC <rx_buffer>
    F7FFFEC4    bl 0x00020A5E <get_src_addr>
    4603        mov r3, r0
    461A        mov r2, r3
    4BA2        ldr r3, =0x200006F8 <tag_address>
    801A        strh r2, [r3]
--- ds_twr_responder.c -- 138 ------------------------------
set_dst_addr(tx_resp_msg, tag_address);
    4BA1        ldr r3, =0x200006F8 <tag_address>
    881B        ldrh r3, [r3]
    4619        mov r1, r3
    48A0        ldr r0, =0x20000028 <tx_resp_msg>
    F7FFFECE    bl 0x00020A86 <set_dst_addr>
--- ds_twr_responder.c -- 139 ------------------------------
tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
    4BA0        ldr r3, =0x200006FA <frame_seq_nb>
    781A        ldrb r2, [r3]
    4B9E        ldr r3, =0x20000028 <tx_resp_msg>
    709A        strb r2, [r3, #2]
--- ds_twr_responder.c -- 140 ------------------------------
dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
    2200        movs r2, #0
    499C        ldr r1, =0x20000028 <tx_resp_msg>
    200F        movs r0, #15
    F7F1FC6C    bl 0x000125D4 <dwt_writetxdata>
--- ds_twr_responder.c -- 141 ------------------------------
dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
    2201        movs r2, #1
    2100        movs r1, #0
    200F        movs r0, #15
    F7F1FC75    bl 0x000125F0 <dwt_writetxfctrl>
--- ds_twr_responder.c -- 142 ------------------------------
ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
    2003        movs r0, #3
    F7F1FC80    bl 0x0001260C <dwt_starttx>
    9018        str r0, [sp, #0x60]
--- ds_twr_responder.c -- 143 ------------------------------
/* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
if (ret == DWT_ERROR)
    9B18        ldr r3, [sp, #0x60]
    F1B33FFF    cmp.w r3, #0xFFFFFFFF
    D103        bne 0x00020D1E
--- ds_twr_responder.c -- 146 ------------------------------
{
test_run_info((unsigned char *)"ERROR: send resp");
    4896        ldr r0, =0x00026BB4
    F7FFFDE8    bl 0x000208EC <test_run_info>
    E002        b 0x00020D24
--- ds_twr_responder.c -- 148 ------------------------------
}
else
test_run_info((unsigned char *)"resp sent");
    4895        ldr r0, =0x00026BC8
    F7FFFDE4    bl 0x000208EC <test_run_info>
--- ds_twr_responder.c -- 151 ------------------------------
/* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR), 0);
    2300        movs r3, #0
    4A94        ldr r2, =0x3427D000
    2100        movs r1, #0
    4894        ldr r0, =0x20000714 <status_reg>
    F7FFFF64    bl 0x00020BF8 <waitforsysstatus>
--- ds_twr_responder.c -- 155 ------------------------------
/* Increment frame sequence number after transmission of the response message (modulo 256). */
frame_seq_nb++;
    4B8E        ldr r3, =0x200006FA <frame_seq_nb>
    781B        ldrb r3, [r3]
    3301        adds r3, #1
    B2DA        uxtb r2, r3
    4B8C        ldr r3, =0x200006FA <frame_seq_nb>
    701A        strb r2, [r3]
--- ds_twr_responder.c -- 158 ------------------------------
if (status_reg & DWT_INT_RXFCG_BIT_MASK)
    4B8F        ldr r3, =0x20000714 <status_reg>
    681B        ldr r3, [r3]
    F4034380    and r3, r3, #0x4000
    2B00        cmp r3, #0
    F00080F2    beq.w 0x00020F2E
--- ds_twr_responder.c -- 160 ------------------------------
{
/* Clear good RX frame event and TX frame sent in the DW IC status register. */
dwt_writesysstatuslo(DWT_INT_RXFCG_BIT_MASK | DWT_INT_TXFRS_BIT_MASK);
    F44F4081    mov.w r0, #0x4080
    F7F1FD4B    bl 0x000127E8 <dwt_writesysstatuslo>
--- ds_twr_responder.c -- 163 ------------------------------
/* A frame has been received, read it into the local buffer. */
frame_len = dwt_getframelength();
    F7F1FD7F    bl 0x00012854 <dwt_getframelength>
    4603        mov r3, r0
    461A        mov r2, r3
    4B89        ldr r3, =0x20000740 <frame_len>
    801A        strh r2, [r3]
--- ds_twr_responder.c -- 166 ------------------------------
if (frame_len <= RX_BUF_LEN)
    4B88        ldr r3, =0x20000740 <frame_len>
    881B        ldrh r3, [r3]
    2B18        cmp r3, #24
    D806        bhi 0x00020D74
--- ds_twr_responder.c -- 167 ------------------------------
{
dwt_readrxdata(rx_buffer, frame_len, 0);
    4B86        ldr r3, =0x20000740 <frame_len>
    881B        ldrh r3, [r3]
    2200        movs r2, #0
    4619        mov r1, r3
    487C        ldr r0, =0x200006FC <rx_buffer>
    F7F1FD2C    bl 0x000127CC <dwt_readrxdata>
--- ds_twr_responder.c -- 169 ------------------------------
}
/* Check that the frame is a final message sent by "DS TWR initiator" example.
* As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
rx_buffer[ALL_MSG_SN_IDX] = 0;
    4B7A        ldr r3, =0x200006FC <rx_buffer>
    2200        movs r2, #0
    709A        strb r2, [r3, #2]
--- ds_twr_responder.c -- 174 ------------------------------
if (frame_is_final_for_me(rx_buffer))
    4879        ldr r0, =0x200006FC <rx_buffer>
    F7FFFE39    bl 0x000209F2 <frame_is_final_for_me>
    4603        mov r3, r0
    2B00        cmp r3, #0
    F00080D6    beq.w 0x00020F34
--- ds_twr_responder.c -- 178 ------------------------------
double Ra, Rb, Da, Db;
int64_t tof_dtu;
/* Retrieve response transmission and final reception timestamps. */
resp_tx_ts = get_tx_timestamp_u64();
    F7FFFE93    bl 0x00020AB2 <get_tx_timestamp_u64>
    4602        mov r2, r0
    460B        mov r3, r1
    497C        ldr r1, =0x20000720 <resp_tx_ts>
    E9C12300    strd r2, r3, [r1, #0]
--- ds_twr_responder.c -- 183 ------------------------------
final_rx_ts = get_rx_timestamp_u64();
    F7FFFECA    bl 0x00020B2E <get_rx_timestamp_u64>
    4602        mov r2, r0
    460B        mov r3, r1
    497A        ldr r1, =0x20000728 <final_rx_ts>
    E9C12300    strd r2, r3, [r1, #0]
--- ds_twr_responder.c -- 184 ------------------------------
/* Get timestamps embedded in the final message. */
final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
    AB07        add r3, sp, #28
    4619        mov r1, r3
    4878        ldr r0, =0x20000706
    F7FFFEFE    bl 0x00020BAA <final_msg_get_ts>
--- ds_twr_responder.c -- 187 ------------------------------
final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
    AB06        add r3, sp, #24
    4619        mov r1, r3
    4877        ldr r0, =0x2000070A
    F7FFFEF9    bl 0x00020BAA <final_msg_get_ts>
--- ds_twr_responder.c -- 188 ------------------------------
final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
    AB05        add r3, sp, #20
    4619        mov r1, r3